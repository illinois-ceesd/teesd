.TH "operators" 3 "Fri Apr 10 2020" "Version 1.0" "JustKernels" \" -*- nroff -*-
.ad l
.nh
.SH NAME
operators \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fBapplyoperator\fP (\fBnumDim\fP, \fBdimSizes\fP, \fBnumComponents\fP, \fBnumPoints\fP, \fBopDir\fP, \fBopInterval\fP, \fBnumStencils\fP, \fBstencilSizes\fP, \fBstencilStarts\fP, numValues, \fBstencilWeights\fP, \fBstencilOffsets\fP, \fBstencilID\fP, \fBU\fP, dU)"
.br
.RI "applyoperator applies an operator specified as a stencil set to the provided state data "
.ti -1c
.RI "subroutine \fBapplyoperatorv\fP (\fBnumDim\fP, \fBdimSizes\fP, \fBnumComponents\fP, \fBnumPoints\fP, \fBopDir\fP, \fBopInterval\fP, \fBnumStencils\fP, \fBstencilSizes\fP, \fBstencilStarts\fP, numValues, \fBstencilWeights\fP, \fBstencilOffsets\fP, \fBstencilID\fP, \fBU\fP, dU)"
.br
.RI "applyoperator applies an operator specified as a stencil set to the provided state data "
.ti -1c
.RI "subroutine \fBapplyoperatorblobs\fP (\fBnumDim\fP, \fBdimSizes\fP, \fBnumComponents\fP, \fBnumPointsBuffer\fP, \fBopDir\fP, \fBnumStencils\fP, \fBstencilSizes\fP, \fBstencilStarts\fP, numStencilValues, \fBstencilWeights\fP, \fBstencilOffsets\fP, numPointsStencil, numPointsApply, stencilPoints, \fBU\fP, dU)"
.br
.RI "applyoperatorblobs applies an operator by applying each stencil in turn to all the points to which it applies "
.ti -1c
.RI "subroutine \fBapplysinglestencil\fP (\fBnumDim\fP, \fBdimSizes\fP, \fBnumComponents\fP, \fBnumPointsBuffer\fP, \fBopDir\fP, numPointsApply, applyPoints, stencilSize, \fBstencilWeights\fP, \fBstencilOffsets\fP, \fBU\fP, dU)"
.br
.RI "applysinglestencil applies an operator by applying a given stencil to the specified points "
.in -1c
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine operators::applyoperator (integer(kind=4), intent(in) numDim, integer(kind=8), dimension(numdim), intent(in) dimSizes, integer(kind=4), intent(in) numComponents, integer(kind=8), intent(in) numPoints, integer(kind=4), intent(in) opDir, integer(kind=8), dimension(2*numdim), intent(in) opInterval, integer(kind=4), intent(in) numStencils, integer(kind=4), dimension(numstencils), intent(in) stencilSizes, integer(kind=4), dimension(numstencils), intent(in) stencilStarts, integer(kind=4), intent(in) numValues, real(kind=8), dimension(numvalues), intent(in) stencilWeights, integer(kind=4), dimension(numvalues), intent(in) stencilOffsets, integer(kind=4), dimension(numpoints), intent(in) stencilID, real(kind=8), dimension(numpoints*numcomponents), intent(in), target U, real(kind=8), dimension(numpoints*numcomponents), intent(out), target dU)"

.PP
applyoperator applies an operator specified as a stencil set to the provided state data applyoperator is a brute-force method of applying a set of stencils to a given data buffer\&. The The stencilset and operand are given as flat, primitive arrays, with supporting data to indicate the size of the data structures\&. An additional \fIstencil connectivity\fP is given which indicates which stencil (i\&.e\&. which stencil from the stencil set) to apply to each point\&. This brute-force method simply loops through all points, and applies the stencil indicated by the resolved stencil connectivity to each point\&. applyoperator brute-force method cartoon 
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP indicates the number of dimensions for the input data (dimSizes,opInterval) 
.br
\fIdimSizes\fP indicates the number of points in each dimension [Nx Ny Nz] 
.br
\fInumComponents\fP indicates the number of components in the input/output data (U,dU) 
.br
\fInumPoints\fP indicates the total number of points \fCNx*Ny*Nz\fP 
.br
\fIopDir\fP indicates in which direction the operator will be applied [X=1 | Y=2 | Z=3] 
.br
\fIopInterval\fP array of size (2*numDim) which indicates the index interval on which to operate [xStart,xEnd,yStart,yEnd\&.\&.\&.] 
.br
\fInumStencils\fP indicates the number of stencils in the input stencilset 
.br
\fIstencilSizes\fP array of size (numStencils) which indicates the number of weight values for each stencil 
.br
\fIstencilStarts\fP array of size (numStencils) which indicates the starting index into (stencilWeights and stencilOffsets) for each stencil 
.br
\fInumValues\fP total number of stencil weight values (numStencils[1]*numStencils[2]*\&.\&.\&.numStecils[numStencils]) (req'd for C/Fort interface) 
.br
\fIstencilWeights\fP array of size (numValues) which contains the weights for all the stencils in the stencilset 
.br
\fIstencilOffsets\fP array of size (numValues) which indicates the offsets from the \fIconsidered\fP point to the point where each weight is applied 
.br
\fIstencilID\fP array of size (numPoints) which indicates the stencil ID for each point 
.br
\fIU\fP the data on which to operate 
.br
\fIdU\fP where to stuff the result 
.RE
.PP

.PP
Definition at line 37 of file Operators\&.f90\&.
.PP
Referenced by grid::computecurvilineargridmetrics()\&.
.SS "subroutine operators::applyoperatorblobs (integer(kind=4), intent(in) numDim, integer(kind=8), dimension(numdim), intent(in) dimSizes, integer(kind=4), intent(in) numComponents, integer(kind=8), intent(in) numPointsBuffer, integer(kind=4), intent(in) opDir, integer(kind=4), intent(in) numStencils, integer(kind=4), dimension(numstencils), intent(in) stencilSizes, integer(kind=4), dimension(numstencils), intent(in) stencilStarts, integer(kind=4), intent(in) numStencilValues, real(kind=8), dimension(numstencilvalues), intent(in) stencilWeights, integer(kind=4), dimension(numstencilvalues), intent(in) stencilOffsets, integer(kind=8), dimension(numstencils), intent(in) numPointsStencil, integer(kind=8), intent(in) numPointsApply, integer(kind=8), dimension(numpointsapply), intent(in) stencilPoints, real(kind=8), dimension(numpointsbuffer), intent(in) U, real(kind=8), dimension(numpointsbuffer), intent(out) dU)"

.PP
applyoperatorblobs applies an operator by applying each stencil in turn to all the points to which it applies applyoperatorblobs is a \fIblobbed\fP method of applying a set of stencils to a given data buffer\&. The stencilset and operand are given as flat, primitive arrays, with supporting data to indicate the size of the data structures\&. An additional \fIdual stencil connectivity\fP is given which indicates which points to apply to a given stencil\&. This blobbed method loops through all the stencils, and applies each stencil to the set of pionts indicated by the resolved dual stencil connectivity for each stencil\&. applyoperatorBLOBS - blobbed method cartoon 
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP indicates the number of dimensions for the input data (dimSizes,opInterval) 
.br
\fIdimSizes\fP indicates the number of points in each dimension [Nx Ny Nz] 
.br
\fInumComponents\fP indicates the number of components in the input/output data (U,dU) 
.br
\fInumPointsBuffer\fP indicates the total number of points \fCNx*Ny*Nz\fP 
.br
\fIopDir\fP indicates in which direction the operator will be applied [X=1 | Y=2 | Z=3] 
.br
\fInumStencils\fP indicates the number of stencils in the input stencilset 
.br
\fIstencilSizes\fP array of size (numStencils) which indicates the number of weight values for each stencil 
.br
\fIstencilStarts\fP array of size (numStencils) which indicates the starting index into (stencilWeights and stencilOffsets) for each stencil 
.br
\fInumStencilValues\fP total number of stencil weight values (numStencils[1]*numStencils[2]*\&.\&.\&.numStecils[numStencils]) (req'd for C/Fort interface) 
.br
\fIstencilWeights\fP array of size (numValues) which contains the weights for all the stencils in the stencilset 
.br
\fIstencilOffsets\fP array of size (numValues) which indicates the offsets from the \fIconsidered\fP point to the point where each weight is applied 
.br
\fInumPointsStencil\fP array of size (numStencils) which indicates how many points to apply each stencil 
.br
\fInumPointsApply\fP total number of points in the stencilPoints array (needed for C/Fortran interface) 
.br
\fIstencilPoints\fP array of size (numPointsStencil(1)*numPointsStencil(2)*\&.\&.\&.numPointsStencil(numStencils)) indicating the points to which each stencil applies 
.br
\fIU\fP the data on which to operate 
.br
\fIdU\fP where to stuff the result 
.RE
.PP

.PP
Definition at line 313 of file Operators\&.f90\&.
.PP
References applysinglestencil()\&.
.SS "subroutine operators::applyoperatorv (integer(kind=4), intent(in) numDim, integer(kind=8), dimension(numdim), intent(in) dimSizes, integer(kind=4), intent(in) numComponents, integer(kind=8), intent(in) numPoints, integer(kind=4), intent(in) opDir, integer(kind=8), dimension(2*numdim), intent(in) opInterval, integer(kind=4), intent(in) numStencils, integer(kind=4), dimension(numstencils), intent(in) stencilSizes, integer(kind=4), dimension(numstencils), intent(in) stencilStarts, integer(kind=4), intent(in) numValues, real(kind=8), dimension(numvalues), intent(in) stencilWeights, integer(kind=4), dimension(numvalues), intent(in) stencilOffsets, integer(kind=4), dimension(numpoints), intent(in) stencilID, real(kind=8), dimension(numpoints*numcomponents), intent(in), target U, real(kind=8), dimension(numpoints*numcomponents), intent(out), target dU)"

.PP
applyoperator applies an operator specified as a stencil set to the provided state data applyoperator is a brute-force method of applying a set of stencils to a given data buffer\&. The The stencilset and operand are given as flat, primitive arrays, with supporting data to indicate the size of the data structures\&. An additional \fIstencil connectivity\fP is given which indicates which stencil (i\&.e\&. which stencil from the stencil set) to apply to each point\&. This brute-force method simply loops through all points, and applies the stencil indicated by the resolved stencil connectivity to each point\&. applyoperator brute-force method cartoon 
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP indicates the number of dimensions for the input data (dimSizes,opInterval) 
.br
\fIdimSizes\fP indicates the number of points in each dimension [Nx Ny Nz] 
.br
\fInumComponents\fP indicates the number of components in the input/output data (U,dU) 
.br
\fInumPoints\fP indicates the total number of points \fCNx*Ny*Nz\fP 
.br
\fIopDir\fP indicates in which direction the operator will be applied [X=1 | Y=2 | Z=3] 
.br
\fIopInterval\fP array of size (2*numDim) which indicates the index interval on which to operate [xStart,xEnd,yStart,yEnd\&.\&.\&.] 
.br
\fInumStencils\fP indicates the number of stencils in the input stencilset 
.br
\fIstencilSizes\fP array of size (numStencils) which indicates the number of weight values for each stencil 
.br
\fIstencilStarts\fP array of size (numStencils) which indicates the starting index into (stencilWeights and stencilOffsets) for each stencil 
.br
\fInumValues\fP total number of stencil weight values (numStencils[1]*numStencils[2]*\&.\&.\&.numStecils[numStencils]) (req'd for C/Fort interface) 
.br
\fIstencilWeights\fP array of size (numValues) which contains the weights for all the stencils in the stencilset 
.br
\fIstencilOffsets\fP array of size (numValues) which indicates the offsets from the \fIconsidered\fP point to the point where each weight is applied 
.br
\fIstencilID\fP array of size (numPoints) which indicates the stencil ID for each point 
.br
\fIU\fP the data on which to operate 
.br
\fIdU\fP where to stuff the result 
.RE
.PP

.PP
Definition at line 175 of file Operators\&.f90\&.
.SS "subroutine operators::applysinglestencil (integer(kind=4), intent(in) numDim, integer(kind=8), dimension(numdim), intent(in) dimSizes, integer(kind=4), intent(in) numComponents, integer(kind=8), intent(in) numPointsBuffer, integer(kind=4), intent(in) opDir, integer(kind=8), intent(in) numPointsApply, integer(kind=8), dimension(numpointsapply), intent(in) applyPoints, integer(kind=4), intent(in) stencilSize, real(kind=8), dimension(stencilsize), intent(in) stencilWeights, integer(kind=4), dimension(stencilsize), intent(in) stencilOffsets, real(kind=8), dimension(numpointsbuffer), intent(in) U, real(kind=8), dimension(numpointsbuffer), intent(out) dU)"

.PP
applysinglestencil applies an operator by applying a given stencil to the specified points applysinglestencil is a single-stencil method which operates on the given points The stencil and operand are given as flat, primitive arrays, with supporting data to indicate the size of the data structures\&. An additional array of points is given which indicates the points on which to operate\&. This single-stencil method loops through all the specified points and applies the stencil to each\&. applyoperatorBLOBS - blobbed method cartoon 
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP indicates the number of dimensions for the input data (dimSizes,opInterval) 
.br
\fIdimSizes\fP indicates the number of points in each dimension [Nx Ny Nz] 
.br
\fInumComponents\fP indicates the number of components in the input/output data (U,dU) 
.br
\fInumPointsBuffer\fP indicates the total number of points \fCNx*Ny*Nz\fP 
.br
\fIopDir\fP indicates in which direction the operator will be applied [X=1 | Y=2 | Z=3] 
.br
\fInumPointsApply\fP total number of points in the stencilPoints array (needed for C/Fortran interface) 
.br
\fIapplyPoints\fP array of size (numPointsApply) indicating the points to which to apply the stencil 
.br
\fIstencilSize\fP number of stencil weights 
.br
\fIstencilWeights\fP array of size (stencilSize) which contains the weights for all the stencils in the stencilset 
.br
\fIstencilOffsets\fP array of size (stencilSize) which indicates the offsets from the \fIconsidered\fP point to the point where each weight is applied 
.br
\fIU\fP the data on which to operate 
.br
\fIdU\fP where to stuff the result 
.RE
.PP

.PP
Definition at line 383 of file Operators\&.f90\&.
.PP
Referenced by applyoperatorblobs()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for JustKernels from the source code\&.
