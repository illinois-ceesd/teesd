.TH "MetricKernels.H" 3 "Fri Apr 10 2020" "Version 1.0" "JustKernels" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MetricKernels.H \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'FC\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, gradijktogradxyz, METRICOPS, GRADIJKTOGRADXYZ)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, ijkgradtoxyzdiv, METRICOPS, IJKGRADTOXYZDIV)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, vhatcomponent, METRICOPS, VHATCOMPONENT)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, alphaweight, METRICOPS, ALPHAWEIGHT)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, alphaweight2, METRICOPS, ALPHAWEIGHT2)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, getpointmetric, METRICOPS, GETPOINTMETRIC)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, boundarypointmetric, METRICOPS, BOUNDARYPOINTMETRIC)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, pointeigenvectors, METRICOPS, POINTEIGENVECTORS)(const int *\fBnumDim\fP"
.br
.ti -1c
.RI "void \fBFC_MODULE\fP (metricops, pointeigenvectorsgs, METRICOPS, POINTEIGENVECTORSGS)(const int *\fBnumDim\fP"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "void const size_t * \fBnumPoints\fP"
.br
.ti -1c
.RI "void const size_t const size_t * \fBgridSizes\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t * \fBopInterval\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int * \fBgridType\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double * \fBgridJacobian\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const double * \fBgridMetric\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const double const double * \fBgradIJK\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const double const double double * \fBgradXYZ\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const double const double * \fBgradVBuffer\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const double const double double * \fBdivBuffer\fP"
.br
.ti -1c
.RI "void const size_t * \fBnumPointsBuffer\fP"
.br
.ti -1c
.RI "void const size_t const size_t * \fBbufferSizes\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const int * \fBvelDir\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const int const double * \fBvelocity\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const int const double double * \fBvelHat\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const int * \fBalphaDir\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const int double * \fBalphaWeight\fP"
.br
.ti -1c
.RI "void const size_t const size_t const size_t const int const double const double * \fBgridJacobianM1\fP"
.br
.ti -1c
.RI "void const size_t const size_t * \fBpointID\fP"
.br
.ti -1c
.RI "void const size_t const size_t const int const double double * \fBpointMetric\fP"
.br
.ti -1c
.RI "void const int * \fBnormDir\fP"
.br
.ti -1c
.RI "void const double double * \fBpointEigenVectors\fP"
.br
.ti -1c
.RI "void const double double double * \fBmetricMags\fP"
.br
.ti -1c
.RI "void const double double * \fBeigenVectors\fP"
.br
.ti -1c
.RI "void const double double double * \fBeigenComponents\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void FC_MODULE (metricops, gradijktogradxyz, METRICOPS, GRADIJKTOGRADXYZ) const"

.SS "void FC_MODULE (metricops, ijkgradtoxyzdiv, METRICOPS, IJKGRADTOXYZDIV) const"

.SS "void FC_MODULE (metricops, vhatcomponent, METRICOPS, VHATCOMPONENT) const"

.SS "void FC_MODULE (metricops, alphaweight, METRICOPS, ALPHAWEIGHT) const"

.SS "void FC_MODULE (metricops, alphaweight2, METRICOPS, ALPHAWEIGHT2) const"

.SS "void FC_MODULE (metricops, getpointmetric, METRICOPS, GETPOINTMETRIC) const"

.SS "void FC_MODULE (metricops, boundarypointmetric, METRICOPS, BOUNDARYPOINTMETRIC) const"

.SS "void FC_MODULE (metricops, pointeigenvectors, METRICOPS, POINTEIGENVECTORS) const"

.SS "void FC_MODULE (metricops, pointeigenvectorsgs, METRICOPS, POINTEIGENVECTORSGS) const"

.SH "Variable Documentation"
.PP 
.SS "void const size_t const size_t const size_t const int const double const double const int * alphaDir"

.PP
Definition at line 24 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const double const int double * alphaWeight"

.PP
Definition at line 24 of file MetricKernels\&.H\&.
.SS "void const size_t * bufferSizes"

.PP
Definition at line 19 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const double const double double* divBuffer"

.PP
Definition at line 14 of file MetricKernels\&.H\&.
.SS "void const double double double* eigenComponents"

.PP
Definition at line 45 of file MetricKernels\&.H\&.
.SS "void const double double* eigenVectors"

.PP
Definition at line 45 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const double const double* gradIJK"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const double const double* gradVBuffer"

.PP
Definition at line 14 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const double const double double* gradXYZ"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double * gridJacobian"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const double* gridJacobianM1"

.PP
Definition at line 29 of file MetricKernels\&.H\&.
.SS "void const int const size_t const size_t const int const double* gridMetric"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t* gridSizes"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const int const size_t const size_t const int* gridType"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const double double double* metricMags"

.PP
Definition at line 42 of file MetricKernels\&.H\&.
.SS "void const int* normDir"

.PP
Definition at line 38 of file MetricKernels\&.H\&.
.SS "void const size_t* numPoints"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t * numPointsBuffer"

.PP
Definition at line 19 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t* opInterval"

.PP
Definition at line 9 of file MetricKernels\&.H\&.
.SS "void const double double* pointEigenVectors"

.PP
Definition at line 42 of file MetricKernels\&.H\&.
.SS "void const int const size_t const size_t * pointID"

.PP
Definition at line 34 of file MetricKernels\&.H\&.
.SS "void const double * pointMetric"

.PP
Definition at line 34 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const int* velDir"

.PP
Definition at line 19 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const int const double double* velHat"

.PP
Definition at line 19 of file MetricKernels\&.H\&.
.SS "void const size_t const size_t const size_t const int const double const int const double* velocity"

.PP
Definition at line 19 of file MetricKernels\&.H\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for JustKernels from the source code\&.
