.TH "viscid" 3 "Fri Apr 10 2020" "Version 1.0" "JustKernels" \" -*- nroff -*-
.ad l
.nh
.SH NAME
viscid \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fBstrongflux1d\fP (\fBnumDim\fP, \fBfluxDir\fP, \fBgridSizes\fP, \fBnumPoints\fP, \fBopInterval\fP, \fBgridType\fP, \fBgridMetric\fP, \fBtauBuffer\fP, \fBenergyBuffer\fP, \fBfluxBuffer\fP)"
.br
.RI "Compute the curvilinear cartesian viscous fluxes in 1 dimension\&. "
.ti -1c
.RI "subroutine \fBscalarflux1d\fP (\fBnumDim\fP, \fBfluxDir\fP, \fBgridSizes\fP, \fBnumPoints\fP, \fBopInterval\fP, \fBgridType\fP, \fBgridMetric\fP, \fBgradScalar\fP, \fBfluxBuffer\fP)"
.br
.RI "Compute the curvilinear cartesian viscous fluxes in 1 dimension\&. "
.in -1c
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine viscid::scalarflux1d (integer(kind=4), intent(in) numDim, integer(kind=4), intent(in) fluxDir, integer(kind=8), dimension(numdim), intent(in) gridSizes, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(2*numdim), intent(in) opInterval, integer(kind=4), intent(in) gridType, real(kind=8), dimension(numdim*numdim*numpoints), intent(in), target gridMetric, real(kind=8), dimension(numpoints*numdim), intent(in), target gradScalar, real(kind=8), dimension(numpoints), intent(out) fluxBuffer)"

.PP
Compute the curvilinear cartesian viscous fluxes in 1 dimension\&. retains logic to simplify calculations on uniform or stretched cartesian grids
.PP
See /ref conserve for theory 
.PP
Definition at line 173 of file Viscid\&.f90\&.
.PP
References grid::rectilinear, simple::yax(), simple::zxdoty(), and simple::zxy()\&.
.SS "subroutine viscid::strongflux1d (integer(kind=4), intent(in) numDim, integer(kind=4), intent(in) fluxDir, integer(kind=8), dimension(numdim), intent(in) gridSizes, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(2*numdim), intent(in) opInterval, integer(kind=4), intent(in) gridType, real(kind=8), dimension(numdim*numdim*numpoints), intent(in), target gridMetric, real(kind=8), dimension(numpoints*numdim*(numdim+1)/2), intent(in), target tauBuffer, real(kind=8), dimension(numpoints*numdim), intent(in), target energyBuffer, real(kind=8), dimension(numpoints*(numdim+2)), intent(out), target fluxBuffer)"

.PP
Compute the curvilinear cartesian viscous fluxes in 1 dimension\&. retains logic to simplify calculations on uniform or stretched cartesian grids
.PP
See /ref conserve for theory 
.PP
Definition at line 22 of file Viscid\&.f90\&.
.PP
References simple::assignmentxa(), grid::rectilinear, simple::yax(), simple::ywxpy(), simple::zxdoty(), and simple::zxy()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for JustKernels from the source code\&.
