.TH "xpacc_documentation_guide" 3 "Fri Apr 10 2020" "Version 1.0" "JustKernels" \" -*- nroff -*-
.ad l
.nh
.SH NAME
xpacc_documentation_guide \- Doxygen Documentation Guide 
This is a sort of quickstart guide to using Doxygen in XPACC codes\&.
.PP
Default doxygen documentation is not very good\&. It really needs to be configured and guided by doxygen markup\&. The markup can go in the code (as is usual), or it can go into *\&.dox files anywhere in the source tree\&. Dox files help avoid cluttering the code with doxygen markup, but use of them carries increased risk of undocumented (or worse: \fIwrong\fP documented) code as it evolves\&. Any improvements or suggestions on better practices are welcome\&.
.SH "Documenting Code"
.PP
General notes & guidelines:
.IP "\(bu" 2
Doxygen is used to generate source code documentation
.IP "\(bu" 2
Doxygen comments should be in the source files, or *\&.dox files\&. (keeps headers clear)
.IP "\(bu" 2
Use mostly regular comments in headers (if any)
.IP "\(bu" 2
Use @command style, and \fBnot\fP \\command style Doxygen commands\&. This is consistent with XPACC-developed annotations\&.
.PP
.SS "File documentation"
Required Doxygen tags
.IP "\(bu" 2
@file
.IP "\(bu" 2
@brief
.IP "\(bu" 2
@author
.PP
.PP
\fBNote:\fP
.RS 4
The @file tag is unnecessary when the documentation appears near the top of a file and is clearly not associated with any other code construct\&.
.RE
.PP
.SS "Class documentation"
All classes should have a brief and detailed description that at least indicates what the class does\&. If the class has public or protected members, then those should be documented as follows: 
.SS "Member Data"
.IP "\(bu" 2
@brief
.PP
.SS "Methods (including stand-alone non-member functions)"
For functions, please include the parameter descriptions \fBbefore\fP the further details about usage, limitations, etc\&. In general, the more than can be said about a function, the better\&.
.IP "\(bu" 2
@brief
.IP "\(bu" 2
@param
.IP "\(bu" 2
@returns
.IP "\(bu" 2
Detailed description
.PP
.SS "Program documentation"
.IP "\(bu" 2
@brief
.IP "\(bu" 2
Detailed description including usage information
.PP
.SS "Other code constructs"
.IP "\(bu" 2
@brief
.PP
.SS "Miscellaneous commands"
A few other Doxygen commands are useful when documenting code and projects\&. The \fIissues\fP created with these commands are automatically collated into a summary pages dedicated to the issue type (i\&.e\&. bug, note, warning, or todo)\&. This provides a convenient summary of all (known) bugs or a TODO list for a code or project\&.
.IP "\(bu" 2
@bug - allows a description of bugs in code constructs or programs
.IP "\(bu" 2
@note - is a general noting facility allowing construct-associated notes
.IP "\(bu" 2
@warning - is useful for alerting users or developers about construct-associated pitfalls or limitations
.IP "\(bu" 2
@todo - provides developers a way to note things left to do for a project or implementation
.PP
.PP
Examples of the documentation generated by the above commands: 
.PP
\fBNote:\fP
.RS 4
These commands are useful for creating notes on projects or constructs which are automatically summarized inline as well as in dedicated documentation pages\&. 
.RE
.PP
\fBBug\fP
.RS 4
No known bugs\&. 
.RE
.PP
\fBWarning:\fP
.RS 4
Coding is inherently dangerous\&. 
.RE
.PP
\fBTodo\fP
.RS 4
Refactor away redundant code\&.
.RE
.PP
.SH "Formats for Code Comments"
.PP
\fCDoxygen\fP interprets special commands and formatting in comments to generate documentation for your code and project\&. Doxygen also supports the \fIMarkdown\fP markup language for formatting its generated documentation\&. The following sections are meant to be a summary with examples for some of the most useful commands and formats\&.
.PP
All of the documentation below is generated by the file: \fC\fBdoc/Documentation\&.dox\fP\fP
.br
Open it in your favorite editor to see how the documentation constructs below are created from comment formatting\&.
.PP
Markdown formats, and some html tags can be used inline with your comments to make your documentation pretty and more readable\&. Some useful examples follow\&.
.PP
.SS "Headers "
.PP
The following examples show the syntax in a block quote, followed directly by how it would look in the generated documentation\&.
.PP
Different kinds of headers can be created like these\&.\&.\&. 
.PP
.nf
  This is a first level header
  ===========================

.fi
.PP
.PP
.SH "This is a first level header "
.PP
.PP
.PP
.nf
  This is a second level header
  ---------------------------
.fi
.PP
.PP
.SS "This is a second level header "
.PP
.PP
.nf
  ###Third level header
.fi
.PP
.PP
.SS "Third level header"
.PP
.SS "Italics and Bold "
.PP
You can create \fIitalics\fP by encasing in underscores like this (_italics_) and \fBbold\fP by encasing in asterics like this (**bold**) or by using html tags like this (<b>bold</b>)\&.
.PP
.SS "Lists "
.PP
A bulleted list can be created like this: 
.PP
.nf
 - Element 1
 - Element 2
   -# Subelement 1
   -# Subelement 2
 - Element 3

.fi
.PP
.PP
.IP "\(bu" 2
Element 1
.IP "\(bu" 2
Element 2
.IP "  1." 6
Subelement 1
.IP "  2." 6
Subelement 2
.PP

.IP "\(bu" 2
Element 3
.PP
.PP
Lists of numbered items are created like this\&.\&.\&. 
.PP
.nf
 1. Element 1
 2. Element 2
 3. Element 3

.fi
.PP
.PP
.IP "1." 4
Element 1
.IP "2." 4
Element 2
.IP "3." 4
Element 3
.PP
.PP
.SS "Links "
.PP
Embed links in your documentation like this: 
.br
 
.PP
.RS 4
[XPACC Jira](https://xpaccillinois.atlassian.net 'This is the mouseover text\&.')
.br
.RE
.PP
.PP
\fCXPACC Jira\fP
.br
.PP
.SS "Blockquotes and Code Sections "
.PP
Blockquotes can be made by using the >, like this: 
.PP
.nf
 > Use blockquotes especially when documenting user
 > commands and stuff like that.
 > New lines are ignored internally but can be done\n
 > by forcing with "\n"

.fi
.PP
.PP
.RS 4
Use blockquotes especially when documenting user commands and stuff like that\&. New lines are ignored internally but can be done
.br
by forcing with '\\n' 
.RE
.PP
.PP
Blockquotes can also be created with the <blockquote> html tag: 
.PP
.nf
  <blockquote>
  This text will be block-quoted.\n
  The blockquote continues on the next line.
  </blockquote>

.fi
.PP
.PP
.RS 4
This text will be block-quoted\&.
.br
The blockquote continues on the next line\&. 
.RE
.PP
.PP
Note the explicit forcing of a newline with '\\n'\&.
.PP
Code snippets can also be encapsulated as such: @code int test_code_section; char disco_inferno; @endcode
.PP
.PP
.nf
int test_code_section;
char disco_inferno;
.fi
.PP
.PP
.SS "Tables "
.PP
Tables are simple to create in doxygen with the Markdown syntax\&. Here's the syntax for the following example table: 
.PP
.nf
   | Type  |     Description    |      Usage     |    Value        |
   | ----: | :----------------: | :------------: | :-------------- |
   |  0    | simple flag        | -t             | .true.          |
   |  1    | argument optional  | -t or -t [arg] | .true. or [arg] |
   |  2    | argument required  | -t <arg>       | <arg>           |
   |  3    | required w/arg     | -t <arg>       | <arg>           |

.fi
.PP
.PP
creates the following table: Type Description Usage Value  0 simple flag -t \&.true\&. 1 argument optional -t or -t [arg] \&.true\&. or [arg] 2 argument required -t <arg> <arg> 3 required w/arg -t <arg> <arg> 
.SS "Latex "
.PP
Latex can be directly embedded into your comments by delineating the latex code in \\f$'s\&.
.PP
.RS 4
\\f$\\bar{\\mu} = \\frac{1}{N}\\Sigma_{n=1}{N}\\frac{x_n}{n!}\\f$ 
.RE
.PP
.PP
$\bar{\mu} = \frac{1}{N}\Sigma_{n=1}^{N}\frac{x_n}{n!}$.SH "Tips for converting Latex to Doxygen"
.PP
It is relatively straight-forward to convert existing latex documentation into a format that can be generated with latex\&. Below are a couple of tips for making the process as painless as possible\&.
.SS "Enabling latex style commands in Doxygen"
It is common to find custom-defined commands in \fILatex\fP documents and it is possible to port those commands over to \fIDoxygen\fP in order to retain some of this portability\&. \fIDoxygen\fP uses \fCALIASES\fP to provide this function\&. For example, the line
.PP
.PP
.nf
ALIASES = "eg=@e\&.g\&." \
          "RE=\f$\ensuremath{\mathit{Re}}"
.fi
.PP
.PP
provides the custom commands \fC \\eg \fP and \fC \\RE \fP in the doxygen documentation as \fIe\&.g\fP\&. and $\ensuremath{\mathit{Re}}$\&.
.PP
This approach does not add the new commands to the doxygen latex formula interpreter\&. This can be achieved however by placing the commands in a seperate style file and specifying that file with the \fIDoxygen\fP option \fCLATEX_EXTRA_STYLESHEET\fP\&. For example, placing the following lines in a file names PlasComCM\&.sty
.PP
.PP
.nf
\newcommand{\RE}{\ensuremath{\mathit{Re}}}
\newcommand{\eg}{\emph{e\&.g\&.}}
.fi
.PP
.PP
Provides the same commands as above in latex math-mode\&.
.SS "Converting formulas"
\fIDoxygen\fP has the capability to interpret latex formulas, but adding the surrounding syntax can be time consuming if there are a lot of equations inline\&. In \fIvim\fP, typing the following will correctly format every latex equation on a single line
.PP
.PP
.nf
:s[\$[\\f\$[g
.fi
.PP
.PP
It is also worth noting that multi-line constructions such as \\begin{equation} can be replaced with a \fC\\f[\&.\&.\&.]\\f\fP syntax like so 
.PP
.nf
\f[\begin{aligned}
t       &= t^* /(L^* / c^*_\infty) \\
x_i     &= x_i^* /L^* \\
\rho    &= \rho^* /\rho^*_\infty \\
u_i     &= u^*_i/c^*_\infty \\
p       &= p^* /(\rho^*_\infty c^{*2}_\infty) \\
\mu     &= \mu^* /\mu^*_\infty \\
\lambda &= \lambda^* /\mu^*_\infty \\
T       &= T^* /(c^{*2}_\infty/C^*_{p,\infty}) = T^* / [(\gamma_\infty-1)T^*_\infty]
\end{aligned}
\f]

.fi
.PP
.PP
becomes
.PP
.PP
.nf
\f[\begin{aligned}
t       &= t^* /(L^* / c^*_\infty) \\
x_i     &= x_i^* /L^* \\
\rho    &= \rho^* /\rho^*_\infty \\
u_i     &= u^*_i/c^*_\infty \\
p       &= p^* /(\rho^*_\infty c^{*2}_\infty) \\
\mu     &= \mu^* /\mu^*_\infty \\
\lambda &= \lambda^* /\mu^*_\infty \\
T       &= T^* /(c^{*2}_\infty/C^*_{p,\infty}) = T^* / [(\gamma_\infty-1)T^*_\infty]
\end{aligned}
\f]
.fi
.PP
.PP
When a latex construct is used that automatically begins a math enviroment we instead use a \\f{command}{\&.\&.\&.\\f} construct as illustrated by the following syntax\&.
.PP
.PP
.nf
\begin{multline}
\frac{\partial\rho E}{\partial t} = \cdots \frac{1}{\RE\PR}\frac{\partial \mu}{\partial x_i}\frac{\partial T}{\partial x_i} + \frac{\mu}{\RE\PR}\frac{\partial^2 T}{\partial x_i x_i} \\
{} + \left\{\frac{1}{\RE}\frac{\partial \mu}{\partial x_j}\left(\frac{\partial u_i}{\partial x_j}+\frac{\partial u_j}{\partial x_i}\right) + \frac{1}{\RE}\frac{\\partial \\lambda}{\partial x_i}\frac{\partial u_k}{\partial x_k} + \frac{\mu}{\RE}\left(\frac{\partial^2u_i}{\partial x_j\partial x_j} + \frac{\partial^2u_j}{\partial x_i\partial x_j}\right) + \frac{\\lambda}{\RE}\frac{\partial^2 u_k}{\partial x_i \partial x_k}\right\}\frac{\partial u_i}{\partial x_j}
\end{multline}
.fi
.PP
.PP
becomes
.PP
.PP
.nf
\f{multline}{\nonumber
\frac{\partial\rho E}{\partial t} = \cdots \frac{1}{\RE\PR}\frac{\partial \mu}{\partial x_i}\frac{\partial T}{\partial x_i} + \frac{\mu}{\RE\PR}\frac{\partial^2 T}{\partial x_i x_i} \\
{} + \left\{\frac{1}{\RE}\frac{\partial \mu}{\partial x_j}\left(\frac{\partial u_i}{\partial x_j}+\frac{\partial u_j}{\partial x_i}\right) + \frac{1}{\RE}\frac{\\partial \\lambda}{\partial x_i}\frac{\partial u_k}{\partial x_k} + \frac{\mu}{\RE}\left(\frac{\partial^2u_i}{\partial x_j\partial x_j} + \frac{\partial^2u_j}{\partial x_i\partial x_j}\right) + \frac{\\lambda}{\RE}\frac{\partial^2 u_k}{\partial x_i \partial x_k}\right\}\frac{\partial u_i}{\partial x_j}
\f}
.fi
.PP
.PP
The only drawback to doing equations in this manner is a loss of referencing to individual equations, which is apparently not supported by \fIDoxygen\fP\&. 
