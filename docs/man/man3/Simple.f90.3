.TH "Simple.f90" 3 "Fri Apr 10 2020" "Version 1.0" "JustKernels" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Simple.f90 \- 
.SH SYNOPSIS
.br
.PP
.SS "Modules"

.in +1c
.ti -1c
.RI "module \fBsimple\fP"
.br
.in -1c
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fByaxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAXPY point-wise operator performing Y = aX + Y (scalar a) "
.ti -1c
.RI "subroutine \fBzaxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAXPY point-wise operator performing Z = aX + Y (scalar a) "
.ti -1c
.RI "subroutine \fBzaxpby\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBb\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAXPBY point-wise operator performing Z = aX + bY (scalar a,b) "
.ti -1c
.RI "subroutine \fBxaxm1\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "XAXM1 point-wise operator performing X = a/X (scalar a) "
.ti -1c
.RI "subroutine \fBxam1x\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "XAM1X point-wise operator performing X = X/a (scalar a) "
.ti -1c
.RI "subroutine \fByaxpby\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBb\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAXPBY point-wise operator performing Y = aX + bY (scalar a,b) "
.ti -1c
.RI "subroutine \fByax\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAX point-wise operator performing Y = aX (scalar a) "
.ti -1c
.RI "subroutine \fBzxym1\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZXYM1 point-wise operator performing Z = X/Y (all vectors) "
.ti -1c
.RI "subroutine \fBzxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZXY point-wise operator performing Z = XY (all vectors) "
.ti -1c
.RI "subroutine \fBzaxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAXY point-wise operator performing Z = aXY (scalar a, vectors X,Y) "
.ti -1c
.RI "subroutine \fByxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YXY point-wise operator performing Y = XY (all vectors) "
.ti -1c
.RI "subroutine \fBzwxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZWXPY point-wise operator performing Z = WX + Y, where all are vectors\&. "
.ti -1c
.RI "subroutine \fBywxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBW\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YWXPY point-wise operator performing Y = WX + Y, where all are vectors\&. "
.ti -1c
.RI "subroutine \fBzawpxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAWPXY point-wise operator performing Z = aW + XY\&. "
.ti -1c
.RI "subroutine \fBzvwpxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBV\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZVWPXY point-wise operator performing Z = VW + XY\&. "
.ti -1c
.RI "subroutine \fBzwmxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZWMXPY point-wise operator performing Z = W(X+Y) where all are vectors\&. "
.ti -1c
.RI "subroutine \fBzxdoty\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBnumComponents\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZXDOTY numComponents-vector inner product Z = X * Y\&. "
.ti -1c
.RI "subroutine \fBxax\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "XAX point-wise operator performing X = aX (scalar a) "
.ti -1c
.RI "subroutine \fBassignmentyx\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP)"
.br
.RI "ASSIGNMENTYX point-wise operator performing Y = X\&. "
.ti -1c
.RI "subroutine \fBassignmentxa\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "ASSIGNMENTXA point-wise operator performing X = scalar a\&. "
.ti -1c
.RI "subroutine \fBassignmentyabsx\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP)"
.br
.RI "ASSIGNMENTYABSX point-wise operator performing X = scalar a\&. "
.ti -1c
.RI "subroutine \fBveclen\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBnumComp\fP, \fBV\fP, \fBlenV\fP)"
.br
.RI "VECLEN point-wise operator returning the length of a numComp-dimensional vector\&. "
.ti -1c
.RI "subroutine \fByaxm1\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAXM1 point-wise operator performing Y = a/X (scalar a) "
.ti -1c
.RI "subroutine \fBvasupv\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBS\fP, \fBU\fP, \fBV\fP)"
.br
.RI "VASUPV point-wise operator performing V = V + aW where a is a constant scalar, S is a scalar field, and V and W are vectors with numDim components\&. "
.ti -1c
.RI "subroutine \fByassmwdotupy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, S1, S2, \fBW\fP, \fBU\fP, \fBY\fP)"
.br
.RI "YASSMWDOTUPY point-wise operator performing Y = Y + a*(S1+S2)*(W dot U) where W, and U are vector fields with numDim components, and a is a constant scalar, and S1, S2, and Y are scalar fields\&. "
.ti -1c
.RI "subroutine \fByasmwdotupy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBS\fP, \fBW\fP, \fBU\fP, \fBY\fP)"
.br
.RI "YASMWDOTUPY point-wise operator performing Y = Y + a*S*(W dot U) where W, and U are vector fields with numDim components, and a is a constant scalar, and S,Y are scalar fields\&. "
.ti -1c
.RI "subroutine \fByavdotwpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBV\fP, \fBW\fP, \fBY\fP)"
.br
.RI "YAVDOTWPY point-wise operator performing Y = Y + a(V dot W) where Y is a scalar field, a is a constant scalar, V and W are vector fields with numDim components\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for JustKernels from the source code\&.
