.TH "simple" 3 "Fri Apr 10 2020" "Version 1.0" "JustKernels" \" -*- nroff -*-
.ad l
.nh
.SH NAME
simple \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions/Subroutines"

.in +1c
.ti -1c
.RI "subroutine \fByaxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAXPY point-wise operator performing Y = aX + Y (scalar a) "
.ti -1c
.RI "subroutine \fBzaxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAXPY point-wise operator performing Z = aX + Y (scalar a) "
.ti -1c
.RI "subroutine \fBzaxpby\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBb\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAXPBY point-wise operator performing Z = aX + bY (scalar a,b) "
.ti -1c
.RI "subroutine \fBxaxm1\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "XAXM1 point-wise operator performing X = a/X (scalar a) "
.ti -1c
.RI "subroutine \fBxam1x\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "XAM1X point-wise operator performing X = X/a (scalar a) "
.ti -1c
.RI "subroutine \fByaxpby\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBb\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAXPBY point-wise operator performing Y = aX + bY (scalar a,b) "
.ti -1c
.RI "subroutine \fByax\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAX point-wise operator performing Y = aX (scalar a) "
.ti -1c
.RI "subroutine \fBzxym1\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZXYM1 point-wise operator performing Z = X/Y (all vectors) "
.ti -1c
.RI "subroutine \fBzxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZXY point-wise operator performing Z = XY (all vectors) "
.ti -1c
.RI "subroutine \fBzaxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAXY point-wise operator performing Z = aXY (scalar a, vectors X,Y) "
.ti -1c
.RI "subroutine \fByxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YXY point-wise operator performing Y = XY (all vectors) "
.ti -1c
.RI "subroutine \fBzwxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZWXPY point-wise operator performing Z = WX + Y, where all are vectors\&. "
.ti -1c
.RI "subroutine \fBywxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBW\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YWXPY point-wise operator performing Y = WX + Y, where all are vectors\&. "
.ti -1c
.RI "subroutine \fBzawpxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZAWPXY point-wise operator performing Z = aW + XY\&. "
.ti -1c
.RI "subroutine \fBzvwpxy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBV\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZVWPXY point-wise operator performing Z = VW + XY\&. "
.ti -1c
.RI "subroutine \fBzwmxpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBW\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZWMXPY point-wise operator performing Z = W(X+Y) where all are vectors\&. "
.ti -1c
.RI "subroutine \fBzxdoty\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBnumComponents\fP, \fBX\fP, \fBY\fP, \fBZ\fP)"
.br
.RI "ZXDOTY numComponents-vector inner product Z = X * Y\&. "
.ti -1c
.RI "subroutine \fBxax\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "XAX point-wise operator performing X = aX (scalar a) "
.ti -1c
.RI "subroutine \fBassignmentyx\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP)"
.br
.RI "ASSIGNMENTYX point-wise operator performing Y = X\&. "
.ti -1c
.RI "subroutine \fBassignmentxa\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP)"
.br
.RI "ASSIGNMENTXA point-wise operator performing X = scalar a\&. "
.ti -1c
.RI "subroutine \fBassignmentyabsx\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBX\fP, \fBY\fP)"
.br
.RI "ASSIGNMENTYABSX point-wise operator performing X = scalar a\&. "
.ti -1c
.RI "subroutine \fBveclen\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBnumComp\fP, \fBV\fP, \fBlenV\fP)"
.br
.RI "VECLEN point-wise operator returning the length of a numComp-dimensional vector\&. "
.ti -1c
.RI "subroutine \fByaxm1\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBX\fP, \fBY\fP)"
.br
.RI "YAXM1 point-wise operator performing Y = a/X (scalar a) "
.ti -1c
.RI "subroutine \fBvasupv\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBS\fP, \fBU\fP, \fBV\fP)"
.br
.RI "VASUPV point-wise operator performing V = V + aW where a is a constant scalar, S is a scalar field, and V and W are vectors with numDim components\&. "
.ti -1c
.RI "subroutine \fByassmwdotupy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, S1, S2, \fBW\fP, \fBU\fP, \fBY\fP)"
.br
.RI "YASSMWDOTUPY point-wise operator performing Y = Y + a*(S1+S2)*(W dot U) where W, and U are vector fields with numDim components, and a is a constant scalar, and S1, S2, and Y are scalar fields\&. "
.ti -1c
.RI "subroutine \fByasmwdotupy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBS\fP, \fBW\fP, \fBU\fP, \fBY\fP)"
.br
.RI "YASMWDOTUPY point-wise operator performing Y = Y + a*S*(W dot U) where W, and U are vector fields with numDim components, and a is a constant scalar, and S,Y are scalar fields\&. "
.ti -1c
.RI "subroutine \fByavdotwpy\fP (\fBnumDim\fP, \fBnumPoints\fP, \fBbufferSize\fP, \fBbufferInterval\fP, \fBa\fP, \fBV\fP, \fBW\fP, \fBY\fP)"
.br
.RI "YAVDOTWPY point-wise operator performing Y = Y + a(V dot W) where Y is a scalar field, a is a constant scalar, V and W are vector fields with numDim components\&. "
.in -1c
.SH "Function/Subroutine Documentation"
.PP 
.SS "subroutine simple::assignmentxa (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(inout) X)"

.PP
ASSIGNMENTXA point-wise operator performing X = scalar a\&. 
.PP
Definition at line 1091 of file Simple\&.f90\&.
.PP
Referenced by metricops::alphaweight(), metricops::alphaweight2(), grid::computecurvilineargridmetrics(), metricops::gradijktogradxyz(), viscid::strongflux1d(), and zxdoty()\&.
.SS "subroutine simple::assignmentyabsx (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(out) Y)"

.PP
ASSIGNMENTYABSX point-wise operator performing X = scalar a\&. 
.PP
Definition at line 1144 of file Simple\&.f90\&.
.PP
Referenced by metricops::alphaweight(), and metricops::alphaweight2()\&.
.SS "subroutine simple::assignmentyx (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
ASSIGNMENTYX point-wise operator performing Y = X\&. 
.PP
Definition at line 1039 of file Simple\&.f90\&.
.PP
Referenced by grid::computecurvilineargridmetrics()\&.
.SS "subroutine simple::vasupv (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) S, real(kind=8), dimension(numdim*numpoints), intent(in) U, real(kind=8), dimension(numdim*numpoints), intent(inout) V)"

.PP
VASUPV point-wise operator performing V = V + aW where a is a constant scalar, S is a scalar field, and V and W are vectors with numDim components\&. 
.PP
Definition at line 1320 of file Simple\&.f90\&.
.SS "subroutine simple::veclen (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, integer(kind=4), intent(in) numComp, real(kind=8), dimension(numcomp*numpoints), intent(in) V, real(kind=8), dimension(numpoints), intent(out) lenV)"

.PP
VECLEN point-wise operator returning the length of a numComp-dimensional vector\&. 
.PP
Definition at line 1197 of file Simple\&.f90\&.
.PP
Referenced by metricops::alphaweight(), and metricops::alphaweight2()\&.
.SS "subroutine simple::xam1x (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(inout) X)"

.PP
XAM1X point-wise operator performing X = X/a (scalar a) 
.PP
Definition at line 214 of file Simple\&.f90\&.
.SS "subroutine simple::xax (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(inout) X)"

.PP
XAX point-wise operator performing X = aX (scalar a) 
.PP
Definition at line 988 of file Simple\&.f90\&.
.PP
Referenced by metricops::ijkgradtoxyzdiv()\&.
.SS "subroutine simple::xaxm1 (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(inout) X)"

.PP
XAXM1 point-wise operator performing X = a/X (scalar a) 
.PP
Definition at line 162 of file Simple\&.f90\&.
.SS "subroutine simple::yasmwdotupy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) S, real(kind=8), dimension(numdim*numpoints), intent(in) W, real(kind=8), dimension(numdim*numpoints), intent(in) U, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YASMWDOTUPY point-wise operator performing Y = Y + a*S*(W dot U) where W, and U are vector fields with numDim components, and a is a constant scalar, and S,Y are scalar fields\&. 
.PP
Definition at line 1453 of file Simple\&.f90\&.
.SS "subroutine simple::yassmwdotupy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) S1, real(kind=8), dimension(numpoints), intent(in) S2, real(kind=8), dimension(numdim*numpoints), intent(in) W, real(kind=8), dimension(numdim*numpoints), intent(in) U, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YASSMWDOTUPY point-wise operator performing Y = Y + a*(S1+S2)*(W dot U) where W, and U are vector fields with numDim components, and a is a constant scalar, and S1, S2, and Y are scalar fields\&. 
.PP
Definition at line 1385 of file Simple\&.f90\&.
.SS "subroutine simple::yavdotwpy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numdim*numpoints), intent(in) V, real(kind=8), dimension(numdim*numpoints), intent(in) W, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YAVDOTWPY point-wise operator performing Y = Y + a(V dot W) where Y is a scalar field, a is a constant scalar, V and W are vector fields with numDim components\&. 
.PP
Definition at line 1519 of file Simple\&.f90\&.
.SS "subroutine simple::yax (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(out) Y)"

.PP
YAX point-wise operator performing Y = aX (scalar a) 
.PP
Definition at line 318 of file Simple\&.f90\&.
.PP
Referenced by metricops::gradijktogradxyz(), viscid::scalarflux1d(), viscid::strongflux1d(), and metricops::vhatcomponent()\&.
.SS "subroutine simple::yaxm1 (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(inout) X, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YAXM1 point-wise operator performing Y = a/X (scalar a) 
.PP
Definition at line 1265 of file Simple\&.f90\&.
.PP
Referenced by grid::computecurvilineargridmetrics()\&.
.SS "subroutine simple::yaxpby (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), intent(in) b, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YAXPBY point-wise operator performing Y = aX + bY (scalar a,b) 
.PP
Definition at line 267 of file Simple\&.f90\&.
.SS "subroutine simple::yaxpy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YAXPY point-wise operator performing Y = aX + Y (scalar a) 
.PP
Definition at line 9 of file Simple\&.f90\&.
.PP
Referenced by metricops::ijkgradtoxyzdiv()\&.
.SS "subroutine simple::ywxpy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) W, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YWXPY point-wise operator performing Y = WX + Y, where all are vectors\&. 
.PP
Definition at line 647 of file Simple\&.f90\&.
.PP
Referenced by metricops::gradijktogradxyz(), metricops::ijkgradtoxyzdiv(), and viscid::strongflux1d()\&.
.SS "subroutine simple::yxy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(inout) Y)"

.PP
YXY point-wise operator performing Y = XY (all vectors) 
.PP
Definition at line 543 of file Simple\&.f90\&.
.PP
Referenced by metricops::alphaweight2(), metricops::gradijktogradxyz(), and metricops::ijkgradtoxyzdiv()\&.
.SS "subroutine simple::zawpxy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) W, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZAWPXY point-wise operator performing Z = aW + XY\&. ZAWPXY kernel performs Z = aW + XY with scalar \fIa\fP, contiguous input vectors \fIW\fP, \fIX\fP, and \fIY\fP, and output vector \fIZ\fP\&. Operand arrays are contiguous of size \fInumPoints\fP\&. The kernel operates on the rectangular interval specified by \fIbufferInterval\fP\&. The shape of the input and output arrays are specified by \fIbufferSize\fP, which is an \fInumDim\fP - dimensional array that specifies the size in each of \fInumDim\fP dimesions\&.
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP - const integer input specifies the number of dimensions of the input and output arrays 
.br
\fInumPoints\fP - const 64-bit integer input specifies the total size of the input and output arrays 
.br
\fIbufferSize\fP - const 64-bit integer array of size \fInumDim\fP specifies the size of the input and output arrays in each of \fInumDim\fP dimensions 
.br
\fIbufferInterval\fP - const 64-bit integer array of size 2 x \fInumDim\fP indicating the rectangular interval in which the kernel should operate; e\&.g\&. [ \fIiStart\fP \fIiEnd\fP \fIjStart\fP \fIjEnd\fP ] 
.br
\fIa\fP - const input double precision scalar 
.br
\fIW\fP - const double precision contiguous array of size \fInumPoints\fP 
.br
\fIX\fP - const double precision contiguous array of size \fInumPoints\fP 
.br
\fIY\fP - const double precision contiguous array of size \fInumPoints\fP 
.br
\fIZ\fP - output double precision contiguous array of size \fInumpoints\fP 
.RE
.PP

.PP
Definition at line 718 of file Simple\&.f90\&.
.PP
Referenced by euler::flux1d()\&.
.SS "subroutine simple::zaxpby (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), intent(in) b, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZAXPBY point-wise operator performing Z = aX + bY (scalar a,b) 
.PP
Definition at line 111 of file Simple\&.f90\&.
.SS "subroutine simple::zaxpy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZAXPY point-wise operator performing Z = aX + Y (scalar a) 
.PP
Definition at line 60 of file Simple\&.f90\&.
.SS "subroutine simple::zaxy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), intent(in) a, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZAXY point-wise operator performing Z = aXY (scalar a, vectors X,Y) 
.PP
Definition at line 490 of file Simple\&.f90\&.
.SS "subroutine simple::zvwpxy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) V, real(kind=8), dimension(numpoints), intent(in) W, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZVWPXY point-wise operator performing Z = VW + XY\&. ZVWPXY kernel performs Z = VW + XY with contiguous double precision input arrays \fIV\fP, \fIW\fP, \fIX\fP, and \fIY\fP, and output array \fIZ\fP\&. Operand arrays are contiguous of size \fInumPoints\fP\&. The kernel operates on the rectangular interval specified by \fIbufferInterval\fP\&. The shape of the input and output arrays are specified by \fIbufferSize\fP, which is an \fInumDim\fP - dimensional array that specifies the size in each of \fInumDim\fP dimesions\&.
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP - const integer input specifies the number of dimensions of the input and output arrays 
.br
\fInumPoints\fP - const 64-bit integer input specifies the total size of the input and output arrays 
.br
\fIbufferSize\fP - const 64-bit integer array of size \fInumDim\fP specifies the size of the input and output arrays in each of \fInumDim\fP dimensions 
.br
\fIbufferInterval\fP - const 64-bit integer array of size 2 x \fInumDim\fP indicating the rectangular interval in which the kernel should operate; e\&.g\&. [ \fIiStart\fP \fIiEnd\fP \fIjStart\fP \fIjEnd\fP ] 
.br
\fIV\fP - input const double precision contiguous array of size \fInumPoints\fP 
.br
\fIW\fP - input const double precision contiguous array of size \fInumPoints\fP 
.br
\fIX\fP - input const double precision contiguous array of size \fInumPoints\fP 
.br
\fIY\fP - input const double precision contiguous array of size \fInumPoints\fP 
.br
\fIZ\fP - output double precision contiguous array of size \fInumpoints\fP 
.RE
.PP

.PP
Definition at line 791 of file Simple\&.f90\&.
.PP
Referenced by euler::flux1d()\&.
.SS "subroutine simple::zwmxpy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) W, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZWMXPY point-wise operator performing Z = W(X+Y) where all are vectors\&. ZVWPXY kernel performs Z = W(X+Y) with contiguous double precision input arrays \fIW\fP, \fIX\fP, and \fIY\fP, and output array \fIZ\fP\&. Operand arrays are contiguous of size \fInumPoints\fP\&. The kernel operates on the rectangular interval specified by \fIbufferInterval\fP\&. The shape of the input and output arrays are specified by \fIbufferSize\fP, which is an \fInumDim\fP - dimensional array that specifies the size in each of \fInumDim\fP dimesions\&.
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP - const integer input specifies the number of dimensions of the input and output arrays 
.br
\fInumPoints\fP - const 64-bit integer input specifies the total size of the input and output arrays 
.br
\fIbufferSize\fP - const 64-bit integer array of size \fInumDim\fP specifies the size of the input and output arrays in each of \fInumDim\fP dimensions 
.br
\fIbufferInterval\fP - const 64-bit integer array of size 2 x \fInumDim\fP indicating the rectangular interval in which the kernel should operate; e\&.g\&. [ \fIiStart\fP \fIiEnd\fP \fIjStart\fP \fIjEnd\fP ] 
.br
\fIW\fP - input const double precision contiguous array of size \fInumPoints\fP 
.br
\fIX\fP - input const double precision contiguous array of size \fInumPoints\fP 
.br
\fIY\fP - input const double precision contiguous array of size \fInumPoints\fP 
.br
\fIZ\fP - output double precision contiguous array of size \fInumpoints\fP 
.RE
.PP

.PP
Definition at line 865 of file Simple\&.f90\&.
.PP
Referenced by euler::flux1d()\&.
.SS "subroutine simple::zwxpy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) W, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZWXPY point-wise operator performing Z = WX + Y, where all are vectors\&. 
.PP
Definition at line 594 of file Simple\&.f90\&.
.SS "subroutine simple::zxdoty (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, integer(kind=4), intent(in) numComponents, real(kind=8), dimension(numpoints*numcomponents), intent(in) X, real(kind=8), dimension(numpoints*numcomponents), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZXDOTY numComponents-vector inner product Z = X * Y\&. 
.PP
Definition at line 918 of file Simple\&.f90\&.
.PP
References assignmentxa()\&.
.PP
Referenced by viscid::scalarflux1d(), viscid::strongflux1d(), and metricops::vhatcomponent()\&.
.SS "subroutine simple::zxy (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZXY point-wise operator performing Z = XY (all vectors) ZXY performs Z = XY where \fIX\fP, \fIY\fP are each contiguous arrays\&. Operand arrays are contiguous of size \fInumPoints\fP\&. The kernel operates on the rectangular interval specified by \fIbufferInterval\fP\&. The shape of the input and output arrays are specified by \fIbufferSize\fP, which is an \fInumDim\fP - dimensional array that specifies the size in each of \fInumDim\fP dimesions\&.
.PP
\fBParameters:\fP
.RS 4
\fInumDim\fP - const integer input specifies the number of dimensions of the input and output arrays 
.br
\fInumPoints\fP - const 64-bit integer input specifies the total size of the input and output arrays 
.br
\fIbufferSize\fP - const 64-bit integer array of size \fInumDim\fP specifies the size of the input and output arrays in each of \fInumDim\fP dimensions 
.br
\fIbufferInterval\fP - const 64-bit integer array of size 2 x \fInumDim\fP indicating the rectangular interval in which the kernel should operate; e\&.g\&. [ \fIiStart\fP \fIiEnd\fP \fIjStart\fP \fIjEnd\fP ] 
.br
\fIX\fP - const double precision input array 
.br
\fIY\fP - const double precision input array 
.br
\fIZ\fP - double precision output array 
.RE
.PP

.PP
Definition at line 438 of file Simple\&.f90\&.
.PP
Referenced by euler::flux1d(), metricops::gradijktogradxyz(), euler::scalarflux1d(), viscid::scalarflux1d(), viscid::strongflux1d(), and metricops::vhatcomponent()\&.
.SS "subroutine simple::zxym1 (integer(kind=4), intent(in) numDim, integer(kind=8), intent(in) numPoints, integer(kind=8), dimension(numdim), intent(in) bufferSize, integer(kind=8), dimension(2*numdim), intent(in) bufferInterval, real(kind=8), dimension(numpoints), intent(in) X, real(kind=8), dimension(numpoints), intent(in) Y, real(kind=8), dimension(numpoints), intent(out) Z)"

.PP
ZXYM1 point-wise operator performing Z = X/Y (all vectors) 
.PP
Definition at line 371 of file Simple\&.f90\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for JustKernels from the source code\&.
