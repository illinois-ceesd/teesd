#
# module for Cantera, http://cantera.github.com/docs/sphinx/html/index.html
#
include(FindPackageHandleStandardArgs)

IF(NOT CANTERA_DIR)
   SET(CANTERA_DIR "$ENV{CANTERA_DIR}")
ENDIF()

MESSAGE(STATUS "Checking for Cantera in directory: ${CANTERA_DIR}.")

find_path(CANTERA_INCLUDE_DIR Cantera.mak
  PATHS /usr/local/include/cantera 
  /usr/include/cantera
  ENV ${CANTERA_DIR}
  HINTS cantera
  PATH_SUFFIXES include/cantera
  DOC "Cantera include directory")
MESSAGE(STATUS "Found Cantera include directory: ${CANTERA_INCLUDE_DIR}")


find_path(CANTERA_TOP_INCLUDE_DIR cantera
  PATHS /usr/local/include/
  /usr/include/
  ENV ${CANTERA_DIR}
  HINTS cantera
  PATH_SUFFIXES include/
  DOC "Cantera top include directory")
MESSAGE(STATUS "Found Cantera include directory: ${CANTERA_TOP_INCLUDE_DIR}")

find_program (MAKE_EXECUTABLE NAMES make gmake)

function(cantera_get_version)
  if (EXISTS "${CANTERA_INCLUDE_DIR}/base/config.h")
    file (STRINGS "${CANTERA_INCLUDE_DIR}/base/config.h" vstrings REGEX "define CANTERA_VERSION")
    string(REPLACE "\"" " " tmp ${vstrings})
    string(REGEX REPLACE " +" ";" fields ${tmp})
    list(GET fields 2 version)
    set(CANTERA_VERSION ${version} PARENT_SCOPE)
  endif()
endfunction()

  set(CANTERA_VERSION "")
  cantera_get_version(CANTERA_VERSION)

set (cantera_conf_variables "${CANTERA_INCLUDE_DIR}/Cantera.mak")

if (cantera_conf_variables)

  # A temporary makefile to probe the Cantera configuration
  set (cantera_config_makefile "${PROJECT_BINARY_DIR}/Makefile.cantera")
  file (WRITE "${cantera_config_makefile}"
"## This file was autogenerated by FindCantera.cmake
include ${cantera_conf_variables}
show :
\t-@echo -n \${\${VARIABLE}}
")

  macro (cantera_get_variable name var)
    set (${var} "NOTFOUND" CACHE INTERNAL "Cleared" FORCE)
    execute_process (COMMAND ${MAKE_EXECUTABLE} --no-print-directory -f ${cantera_config_makefile} show VARIABLE=${name}
      OUTPUT_VARIABLE ${var}
      RESULT_VARIABLE cantera_return)
  endmacro ()

  cantera_get_variable (CANTERA_INCLUDES        cantera_inc)
  cantera_get_variable (CANTERA_TOTAL_LIBS      cantera_lib)
  cantera_get_variable (CANTERA_TOTAL_LIBS_DEP  cantera_lib_dep)
  cantera_get_variable (CANTERA_FORTRAN_LIBS    cantera_fortran_lib)


  # this may not work for cantera prior to 2.3.
  cantera_get_variable (CANTERA_BOOST_INCLUDES  cantera_boost_inc)
  if(cantera_boost_inc)
    string(REPLACE "-I" "" cantera_boost_inc ${cantera_boost_inc})
  endif()

  cantera_get_variable (CANTERA_EXTRA_INCLUDES cantera_extra_inc)
  if(cantera_extra_inc)
    string(REPLACE "-I" "" cantera_extra_inc ${cantera_extra_inc})
    string(REPLACE " " ";" cantera_extra_inc ${cantera_extra_inc})
  endif()

  # We are done with the temporary Makefile, calling CANTERA_GET_VARIABLE after this point is invalid!
  file (REMOVE ${cantera_config_makefile})

  # remove -lcvode from the libraries
  # this is an apparant bug in Cantera to include it even if not needed
  # todo: add check to see if we need it, don't just remove it always
  # only supported by cmake 3.1.3 and newer
  # write a C equivalent, this will at least give us a warm fuzzy
  #
  #    set(_CANTERA_TEST_SOURCE "
  #    program sundialstest
  #      use cantera
  #    end program sundialstest
  #")
  #
  #    set (CMAKE_REQUIRED_INCLUDES ${includes})
  #    set (CMAKE_REQUIRED_LIBRARIES ${libraries})
  #    check_fortran_source_runs ("${_CANTERA_TEST_SOURCE}" ${runs})
  #    if (${${runs}})
  #    else ()
  string(REPLACE "-lcvode" "" cantera_lib ${cantera_lib})
  string(REPLACE "-lcvode" "" cantera_fortran_lib ${cantera_fortran_lib})
  #    endif ()

#  set(CANTERA_Fortran_LIBRARY ${cantera_fortran_lib})
#  set(CANTERA_CORE_LIBRARY ${cantera_lib})
#  set(CANTERA_EXTRA_LIBRARIES ${cantera_lib_dep})
  string(STRIP "${cantera_lib}" CANTERA_CORE_LIBRARY)

  string(STRIP ${cantera_fortran_lib} CANTERA_Fortran_LIBRARY)
  string(STRIP ${cantera_lib_dep} CANTERA_EXTRA_LIBRARIES)
  set(CANTERA_INCLUDE_DIRS ${CANTERA_INCLUDE_DIR} ${CANTERA_TOP_INCLUDE_DIR} ${cantera_boost_inc} ${cantera_extra_inc})

  mark_as_advanced(CANTERA_INCLUDE_DIRS CANTERA_CORE_LIBRARY 
    CANTERA_Fortran_LIBRARY CANTERA_EXTRA_LIBRARIES)
#
# test that we can build a simple application with cantera
# todo: add this test :-)
# only supported by cmake 3.1.3 and newer
# write a C equivalent, this will at least give us a warm fuzzy
#
#    set(_CANTERA_TEST_SOURCE "
#    program canteratest
#      use cantera
#    end program canteratest
#")
#
#    set (CMAKE_REQUIRED_INCLUDES ${includes})
#    set (CMAKE_REQUIRED_LIBRARIES ${libraries})
#    check_fortran_source_runs ("${_CANTERA_TEST_SOURCE}" ${runs})
#    if (${${runs}})
#      set (CANTERA_EXECUTABLE_RUNS "YES" CACHE BOOL
#        "Can the system successfully run a PETSc executable?  This variable can be manually set to \"YES\" to force CMake to accept a given PETSc configuration, but this will almost always result in a broken build.  If you change PETSC_DIR, PETSC_ARCH, or PETSC_CURRENT you would have to reset this variable." FORCE)
#    endif ()
ELSE()
  SET(CANTERA_DIR "" CACHE PATH
    "An optional hint to the cantera installation directory"
    )
ENDIF()

find_package_handle_standard_args(cantera DEFAULT_MSG
                                  CANTERA_CORE_LIBRARY CANTERA_Fortran_LIBRARY CANTERA_INCLUDE_DIRS)
